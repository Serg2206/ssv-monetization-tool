
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SSV Monetization Tool - Main Entry Point

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ SSVproff-Ecosystem.
–ê–≤—Ç–æ—Ä: –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –°.–í. –°—É—à–∫–æ–≤
"""

import sys
import json
from pathlib import Path
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
from utils.logger import setup_logger
from utils.config_loader import load_and_validate_config
from modules.strategy_planner import determine_actions_for_strategy
from modules.content_injector import inject_monetization_elements
from modules.compliance_checker import (
    check_youtube_description_compliance,
    check_amazon_kdp_compliance,
    check_general_compliance
)
from modules.analytics_tracker import (
    prepare_monetization_report,
    calculate_monetization_metrics,
    track_monetization_event
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)


def process_content(content: Dict[str, Any], config: Dict[str, Any], content_type: str = "video") -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é.
    
    Args:
        content: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ('video', 'book')
    
    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    """
    logger.info(f"Processing {content_type} content")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    strategy = config.get('monetization', {}).get('strategy', 'hidden')
    logger.info(f"Using strategy: {strategy}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    actions = determine_actions_for_strategy(strategy, config)
    
    if not actions:
        logger.info("No monetization actions required for this strategy")
        return content
    
    # –í–Ω–µ–¥—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    modified_content = inject_monetization_elements(content, actions, config)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º
    description = modified_content.get('description', '')
    
    if content_type == "video":
        youtube_issues = check_youtube_description_compliance(description)
        if youtube_issues:
            logger.warning(f"YouTube compliance issues found: {youtube_issues}")
            modified_content['compliance_warnings'] = {
                'youtube': youtube_issues
            }
    elif content_type == "book":
        kdp_issues = check_amazon_kdp_compliance(description)
        if kdp_issues:
            logger.warning(f"Amazon KDP compliance issues found: {kdp_issues}")
            modified_content['compliance_warnings'] = {
                'amazon_kdp': kdp_issues
            }
    
    # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    general_issues = check_general_compliance(description)
    if general_issues:
        logger.warning(f"General compliance issues found: {general_issues}")
        if 'compliance_warnings' not in modified_content:
            modified_content['compliance_warnings'] = {}
        modified_content['compliance_warnings']['general'] = general_issues
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = calculate_monetization_metrics(modified_content)
    modified_content['metrics'] = metrics
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    track_monetization_event('content_processed', content.get('id', 'unknown'), {
        'strategy': strategy,
        'actions': actions,
        'content_type': content_type
    })
    
    logger.info("Content processing completed")
    return modified_content


def generate_report(config: Dict[str, Any], processed_content: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏.
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
        processed_content: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    
    Returns:
        –û—Ç—á—ë—Ç –æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    """
    strategy = config.get('monetization', {}).get('strategy', 'hidden')
    methods = config.get('monetization', {}).get('methods', [])
    metrics = processed_content.get('metrics', {})
    
    report = prepare_monetization_report(strategy, methods, metrics)
    report['content_id'] = processed_content.get('id', 'unknown')
    report['compliance_warnings'] = processed_content.get('compliance_warnings', {})
    
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏."""
    print("üöÄ SSV Monetization Tool v2.0")
    print("=" * 70)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_and_validate_config("monetization_config.yaml")
        strategy = config.get('monetization', {}).get('strategy', 'hidden')
        
        print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏: {strategy.upper()}")
        print("=" * 70)
        
        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)
        print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:")
        print("-" * 70)
        
        sample_content = {
            'id': 'demo_video_001',
            'title': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ',
            'description': '–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.'
        }
        
        print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {sample_content['title']}")
        processed = process_content(sample_content, config, content_type='video')
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        print(f"   {processed['description'][:200]}..." if len(processed['description']) > 200 else f"   {processed['description']}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
        report = generate_report(config, processed)
        
        print(f"\nüìä –û—Ç—á—ë—Ç –æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {report['strategy']}")
        print(f"   –ú–µ—Ç–æ–¥—ã: {', '.join(report['methods_used']) if report['methods_used'] else '–ù–µ—Ç'}")
        print(f"   –ú–µ—Ç—Ä–∏–∫–∏: {json.dumps(report['metrics'], indent=6, ensure_ascii=False)}")
        
        if report.get('compliance_warnings'):
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏:")
            for platform, warnings in report['compliance_warnings'].items():
                print(f"   {platform}: {', '.join(warnings)}")
        
        print("\n" + "=" * 70)
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        print("üìù –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ssv-web-dashboard, ssv-video –∏ ssv-book-generator.")
        print("=" * 70)
        
    except Exception as e:
        logger.error(f"Error in main: {e}", exc_info=True)
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
